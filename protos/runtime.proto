syntax = "proto3";
option go_package = ".;runtime";
option cc_generic_services = false;
option java_generic_services = true;
option py_generic_services = true;
//import "google/protobuf/any.proto";

package runtime.v1;
service Runtime{
    rpc Call(Request) returns (Response){
    }
    rpc CallStream(Request) returns (stream Response){
    }
    /*
    rpc Read(ReadRequest) returns (ReadResponse) {
    }
    rpc ReadStream(ReadRequest) returns (stream ReadResponse) {
    }
    rpc Write(WriteRequest) returns (WriteResponse) {
    }
    rpc WriteStream(stream WriteRequest) returns (WriteResponse) {
    }
    */
}
enum Tables {
    UNSPECIFIED_TABLE = 0;
    route  = 1;
    interface = 2;
    fdb   = 3;
    acl = 4;
    team  = 5;
    lldp = 6;
    neigh = 7;
    system = 8;
    docker = 9;
	alarm = 10;
}
enum Labels {
    UNSPECIFIED_LABLE = 0;
	forward = 1;
	orchagent = 2;
	protocol = 3;
}
enum Methods {
    UNSPECIFIED_METHOD = 0;
    Call 			   = 1;
	CallStream		   = 2;
}
enum MetadataKey{
    UNSPECIFIED_MDKey  = 0;
    Rootpath           = 1;  //for request, Required
    Label              = 2;  //for request, Required
    Updatetime         = 3;  //for response, Optional
}
enum Operations {
    UNSPECIFIED = 0;
    INSERT = 1;
    MODIFY = 2;
    DELETE = 3;
    GET    = 4;
}

message FieldMatch {
    oneof match{
        RouteMatch route = 1;
	    IntfMatch  intf = 2;
        FdbMatch   fdb   = 3;
        AclMatch   acl = 4;
        TeamMatch  team = 5;	
        LldpMatch  lldp = 6;
        NeighMatch  neigh = 7;
        SystemMatch system = 8;
        DockerMatch docker = 9;
		AlarmMatch  alarm = 10;
    }
}

message Entity {
    repeated string label = 1;
    oneof entity{
        RouteEntity route = 2;
	    InterfaceEntity interface = 3;
        FdbEntity   fdb   = 4;
        AclEntity   acl = 5;
        TeamEntity  team = 6;
        LldpEntity  lldp  = 7;
        NeighEntity neigh = 8;
        SystemEntity system = 9;
        DockerEntity docker = 10;
		 AlarmEntity alarm = 11;
    }
}
message Request {
    string device = 1;
    Tables table = 2;
    map<string, string> metadata = 3;
    Operations operation = 4;
    oneof request{
        ReadRequest readRequest = 5;
        WriteRequest writeRequest = 6;
    }
}
message Response {
    map<string, string> metadata = 1;
    oneof response{
    ReadResponse readResponse = 2;
    WriteResponse writeResponse = 3;
   }
}

message ReadRequest{
    repeated FieldMatch matches = 1;
}
message  ReadResponse{
    repeated Entity entities = 1;
}
message WriteRequest{
    repeated Entity entities = 1;
}
message  WriteResponse{
}

//runtime query api begin
//rootpath: /unos/api/v1/runtime/display
//1. route module
//path: rootpath + table + lableï¼Œsuch as: /unos/api/v1/runtime/display/route/forwarding

message RouteMatch {
    string ip = 1;
    string vrf = 2;
}

message Nexthop{
     string nexthop_ip = 1;
     string ifdex_name = 2;
     string nexthop_vrf = 3;
     string protocol = 4;
     uint32 flags = 5;
     string  distance = 6;
     uint32   tag = 7;
     bool valid = 8;
     bool onlink = 9;
     bool master = 10;
     string rmac = 11;
}

message RouteEntity {
    string ip = 1;
    string vrf = 2;
    repeated Nexthop nexthop = 3;
}

//3 interface module
message IntfMatch {
    string  name = 1;
}

message IntfCounter {
	uint64 rxpkts = 1;
	uint64 rxbytes = 2;
    uint64 rxBps = 3;
	uint64 rxutil = 4;
	uint64 rxerror = 5;
	uint64 rxdrop = 6;
	uint64 rxover = 7;
	uint64 txpkts = 8;
	uint64 txbytes = 9;
    uint64 txBps = 10;
	uint64 txutil = 11;
	uint64 txerror = 12;
	uint64 txdrop = 13;
	uint64 txover = 14;
}

message InterfaceEntity {
    string name = 1;
    string linkstate = 2;
    int32  speed = 3;
    repeated string ipv4addr = 4;
    repeated string ipv6addr = 5;
    string mac = 6;
	int32  mtu = 7;
	string master = 8;
	IntfCounter counter = 9;
}
//4 fdb module
message FdbMatch {
    string mac  = 1;
    string vlan_id = 2;
    string bridge_name = 3;
    string port = 4;
}

message FdbEntity {
    enum Domain {
       vlan  = 0;
       bridge =1;
    };
    Domain  domain    =1;
    string mac  = 2;   
    oneof domain_index {
        int32  vlan_id = 3;
        string bridge_name = 4;
    }  
    string port = 5;
    enum Type {
        dynamic = 0;
        static  = 1;
    }
    Type type  = 6;      
}

// 5 ACL module
message AclMatch {
    string aclTable = 1;
    string aclRule = 2;
}

message AclEntity {
    string aclTable = 1;
    string aclRule = 2;
    repeated string ports = 3;
    string direction = 4;
    uint64 pktCount = 5;
    uint64 byteCount = 6;
}

//6 team module
message TeamMatch {
    string  name = 1;
}

enum Status {
   Up = 0;
   Down = 1;
}

message Member {
    string port = 1;
	Status status = 2;
}

message TeamEntity {
    string name = 1;
    string mode = 2;
    Status status = 3;
    repeated Member member = 4;
    string teamCmdline = 5;
    string teamResult = 6;
}
//7 lldp module
message LldpMatch {
    string localport = 1;
}
message LldpMsg {
    string localport = 1;
    string neighborstate =2;
    string remotesysmac = 3;
    string remotesysname = 4;
    string remotesysdescr = 5;
    string remoteportid = 6;
    string remoteportdescr = 7;
    string remotemgmtip = 8;
}
message LldpCfg {
    string hostname = 1;
    string platform = 2;
    string description = 3;
    string bond_slave_src_mac_type = 4;
    string interface_pattern = 5;
    bool interface_description = 6;
    bool interface_promiscuous = 7;
}
message LldpEntity {
    int32 num = 1;
    repeated LldpMsg lldpmsg = 2;
    LldpCfg lldpcfg = 3;
}


//8 neighbor module
message NeighMatch {
    string ip  = 1;
    string l3port = 2;
}

message NeighEntity {
    string ip  = 1;
    string mac  = 2;
    string l3port = 3;
    string l2port = 4;
}

message SystemMatch {
    string resourcetype = 1; // "cpu" or "mem"
}

message DockerCpuPercent {
    string name = 1;
    uint32 percent = 2;
}

message CpuPercent {
    uint32  percent_current = 1;
    uint32  percent_five_sec = 2;
    uint32  percent_one_min = 3;
    uint32  percent_five_min = 4;
}

message ChipCpuPercent {
    string  cpu_no = 1;
    CpuPercent percent = 2;
}

message CpuInfo {
    CpuPercent total_percent  = 1;
    repeated DockerCpuPercent docker_percent = 2;
    repeated ChipCpuPercent  chip_percent = 3;
}

message DockerMemory {
    string name = 1;
    uint64  used  = 2;
}

message MemoryInfo {
    uint64  total = 1;
    uint64  used  = 2;
    uint32 used_percent = 3;
    repeated DockerMemory docker_used = 4;
}

message SystemEntity {
    string resourcetype = 1;
    CpuInfo  cpuinfo  = 2;
    MemoryInfo meminfo = 3;
}

message DockerMatch {
    string name = 1;
}

message PidCpuMem {
    uint32 pid = 1;
    uint32 ppid = 2;
    float cpu_percent = 3;
    float mem_percent = 4;
}

message DockerEntity {
    string name = 1;
    repeated PidCpuMem pidinfo = 2;
}

// alarm module
message AlarmMatch {
    string almsequence = 1;
}
message AlarmEntity {
    string almsequence = 1;
    string almname = 2;
    string modulename = 3;
    string almseverity = 4;
    string almtype = 5;
	string starttime = 6;
	string reason = 7;
	string advise = 8;
	string almout = 9;
	int32  almstate = 10;
}

//runtime query api end

//runtime telemetry api begin
//rootpath: /unos/api/v1/runtime/telemetry

//runtime telemetry api end



